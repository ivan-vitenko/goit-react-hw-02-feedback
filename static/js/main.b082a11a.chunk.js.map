{"version":3,"sources":["components/Feedback/FeedbackOptions.js","components/Feedback/Statistics.js","components/Feedback/Section.js","App.js","reportWebVitals.js","index.js","components/Feedback/Feedback.module.css"],"names":["FeedbackOptions","onLeaveFeedback","className","s","ControlsList","name","type","onClick","Statistics","good","neutral","bad","totalFeedback","positiveFeedbackPercentage","Boolean","StatisticList","Section","children","title","App","state","handleFeedback","e","buttonName","target","setState","prevState","countTotalFeedback","countPositiveFeedbackPercentage","Math","floor","Container","this","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","module","exports"],"mappings":"+QA6BeA,EA1BS,SAAC,GAAD,IAAGC,EAAH,EAAGA,gBAAH,OACtB,gCACE,uDAEA,qBAAIC,UAAWC,IAAEC,aAAjB,UACE,6BACE,wBAAQC,KAAK,OAAOC,KAAK,SAASC,QAASN,EAA3C,oBAKF,6BACE,wBAAQI,KAAK,UAAUC,KAAK,SAASC,QAASN,EAA9C,uBAKF,6BACE,wBAAQI,KAAK,MAAMC,KAAK,SAASC,QAASN,EAA1C,0BCoDOO,EAtEI,SAAC,GAAD,IACjBC,EADiB,EACjBA,KACAC,EAFiB,EAEjBA,QACAC,EAHiB,EAGjBA,IACAC,EAJiB,EAIjBA,cACAC,EALiB,EAKjBA,2BALiB,OAOjB,gCACE,4CAECC,QAAQF,GACP,gCACE,qBAAIV,UAAWC,IAAEY,cAAjB,UACE,wCAAWN,EAAX,OACA,2CAAcC,KACd,uCAAUC,QAGZ,gCACE,wCAAWC,KACX,oDAAuBC,WAI3B,sDClBSG,EANC,SAAC,GAAD,IAAGC,EAAH,EAAGA,SAAUC,EAAb,EAAaA,MAAb,OACd,yBAASA,MAAOA,EAAOhB,UAAWC,IAAEa,QAApC,SACGC,KC+CUE,E,4MA5CbC,MAAQ,CACNX,KAAM,EACNC,QAAS,EACTC,IAAK,G,EAGPU,eAAiB,SAAAC,GACf,IAAMC,EAAaD,EAAEE,OAAOnB,KAC5B,EAAKoB,UAAS,SAAAC,GAAS,sBAAQH,EAAaG,EAAUH,GAAc,O,EAGtEI,mBAAqB,WACnB,OAAO,EAAKP,MAAMX,KAAO,EAAKW,MAAMV,QAAU,EAAKU,MAAMT,K,EAG3DiB,gCAAkC,WAChC,GAAI,EAAKD,qBACP,OACEE,KAAKC,MAAO,EAAKV,MAAMX,KAAO,EAAKkB,qBAAwB,KAAO,K,uDAMtE,OACE,sBAAKzB,UAAWC,IAAE4B,UAAlB,UACE,cAAC,EAAD,CAASb,MAAM,kBAAf,SACE,cAAC,EAAD,CAAiBjB,gBAAiB+B,KAAKX,mBAGzC,cAAC,EAAD,CAASH,MAAM,aAAf,SACE,cAAC,EAAD,CACET,KAAMuB,KAAKZ,MAAMX,KACjBC,QAASsB,KAAKZ,MAAMV,QACpBC,IAAKqB,KAAKZ,MAAMT,IAChBC,cAAeoB,KAAKL,qBACpBd,2BAA4BmB,KAAKJ,6C,GArC3BK,aCKHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,K,kBCfAc,EAAOC,QAAU,CAAC,aAAe,+BAA+B,UAAY,4BAA4B,cAAgB,mC","file":"static/js/main.b082a11a.chunk.js","sourcesContent":["import React from 'react';\nimport s from './Feedback.module.css';\n\nconst FeedbackOptions = ({ onLeaveFeedback }) => (\n  <div>\n    <h2>Please leave feedback</h2>\n\n    <ul className={s.ControlsList}>\n      <li>\n        <button name=\"good\" type=\"button\" onClick={onLeaveFeedback}>\n          Good\n        </button>\n      </li>\n\n      <li>\n        <button name=\"neutral\" type=\"button\" onClick={onLeaveFeedback}>\n          Neutral\n        </button>\n      </li>\n\n      <li>\n        <button name=\"bad\" type=\"button\" onClick={onLeaveFeedback}>\n          Bad\n        </button>\n      </li>\n    </ul>\n  </div>\n);\n\nexport default FeedbackOptions;\n","import React from 'react';\nimport s from './Feedback.module.css';\n\nconst Statistics = ({\n  good,\n  neutral,\n  bad,\n  totalFeedback,\n  positiveFeedbackPercentage,\n}) => (\n  <div>\n    <h2>Statistics</h2>\n\n    {Boolean(totalFeedback) ? (\n      <div>\n        <ul className={s.StatisticList}>\n          <li>Good: {good} </li>\n          <li>Neutral: {neutral}</li>\n          <li>Bad: {bad}</li>\n        </ul>\n\n        <div>\n          <p>Total: {totalFeedback}</p>\n          <p>Positive feedback: {positiveFeedbackPercentage}</p>\n        </div>\n      </div>\n    ) : (\n      <p>No feedback given</p>\n    )}\n  </div>\n);\n\n// class Statistics extends Component {\n//   state = {\n//     good: this.props.good,\n//     neutral: this.props.neutral,\n//     bad: this.props.bad,\n//   };\n\n//   countTotalFeedback = () => {\n//     return this.state.good + this.state.neutral + this.state.bad;\n//   };\n\n//   countPositiveFeedbackPercentage = () => {\n//     if (this.countTotalFeedback()) {\n//       return (\n//         Math.floor((this.state.good / this.countTotalFeedback()) * 100) + '%'\n//       );\n//     }\n//   };\n\n//   render() {\n//     return (\n//       <div>\n//         <ul className={s.StatisticList}>\n//           <li>Good: {this.state.good} </li>\n//           <li>Neutral: {this.state.neutral}</li>\n//           <li>Bad: {this.state.bad}</li>\n//         </ul>\n\n//         {Boolean(this.countTotalFeedback()) && (\n//           <div>\n//             <p>Total: {this.countTotalFeedback()}</p>\n//             <p>\n//               Positive feedback: {' ' + this.countPositiveFeedbackPercentage()}\n//             </p>\n//           </div>\n//         )}\n//       </div>\n//     );\n//   }\n// }\n\nexport default Statistics;\n","import React from 'react';\nimport s from './Feedback.module.css';\n\nconst Section = ({ children, title }) => (\n  <section title={title} className={s.Section}>\n    {children}\n  </section>\n);\n\nexport default Section;\n","import React, { Component } from 'react';\nimport FeedbackOptions from './components/Feedback/FeedbackOptions';\nimport Statistics from './components/Feedback/Statistics';\nimport Section from './components/Feedback/Section';\n\nimport s from './components/Feedback/Feedback.module.css';\n\nclass App extends Component {\n  state = {\n    good: 0,\n    neutral: 0,\n    bad: 0,\n  };\n\n  handleFeedback = e => {\n    const buttonName = e.target.name;\n    this.setState(prevState => ({ [buttonName]: prevState[buttonName] + 1 }));\n  };\n\n  countTotalFeedback = () => {\n    return this.state.good + this.state.neutral + this.state.bad;\n  };\n\n  countPositiveFeedbackPercentage = () => {\n    if (this.countTotalFeedback()) {\n      return (\n        Math.floor((this.state.good / this.countTotalFeedback()) * 100) + '%'\n      );\n    }\n  };\n\n  render() {\n    return (\n      <div className={s.Container}>\n        <Section title=\"FeedbackOptions\">\n          <FeedbackOptions onLeaveFeedback={this.handleFeedback} />\n        </Section>\n\n        <Section title=\"Statistics\">\n          <Statistics\n            good={this.state.good}\n            neutral={this.state.neutral}\n            bad={this.state.bad}\n            totalFeedback={this.countTotalFeedback()}\n            positiveFeedbackPercentage={this.countPositiveFeedbackPercentage()}\n          />\n        </Section>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"ControlsList\":\"Feedback_ControlsList__2f5wU\",\"Container\":\"Feedback_Container__MTrBF\",\"StatisticList\":\"Feedback_StatisticList__1acoM\"};"],"sourceRoot":""}